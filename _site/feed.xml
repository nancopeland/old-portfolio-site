<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-02T13:37:36-04:00</updated><id>http://localhost:4000//</id><title type="html">Nan Copeland</title><subtitle>Nan Copeland's personal site</subtitle><entry><title type="html">Slate Podcasts</title><link href="http://localhost:4000/2019/01/13/slate-podcasts.html" rel="alternate" type="text/html" title="Slate Podcasts" /><published>2019-01-13T00:00:00-05:00</published><updated>2019-01-13T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/13/slate-podcasts</id><content type="html" xml:base="http://localhost:4000/2019/01/13/slate-podcasts.html">&lt;p&gt;I updated the Slate podcasts process to make it easier for users to explore Slate’s shows, find what they’re looking for and subscribe. The design was updated to fit the &lt;a href=&quot;https://slate.com/briefing/2018/01/jason-santa-maria-on-how-slate-redesigned-the-way-we-work.html&quot; target=&quot;_blank&quot;&gt;new Slate brand launched in 2018&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/slate_podcasts/xxx.png&quot; alt=&quot;podcasts homepage&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The podcast redesign process followed &lt;a href=&quot;https://slate.com/briefing/2018/01/why-we-redesigned-slate.html&quot; target=&quot;_blank&quot;&gt;Slate’s site redesign&lt;/a&gt; where Slate updated their &lt;a href=&quot;https://slate.com/briefing/2018/01/jason-santa-maria-on-how-slate-redesigned-the-way-we-work.html&quot; target=&quot;_blank&quot;&gt;design process&lt;/a&gt; and &lt;a href=&quot;https://slate.com/briefing/2018/01/slates-new-cms.html&quot; target=&quot;_blank&quot;&gt;CMS&lt;/a&gt;. Slate’s articles were prioritized during this process so when I started as a designer, podcast publishing was still done using the old CMS.&lt;/p&gt;

&lt;p&gt;When the old site was built, podcasts weren’t as high of a priority for Slate so the old podcasts landing page was just a “podcasts” tag page that featured the latest podcast episodes in reverse chronological order.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/slate_podcasts/old_landing_page.png&quot; alt=&quot;screenshot of old podcasts page&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;
&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Old Slate podcasts landing page&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This had started to become an issue because this was the first page on Google when people searched “slate podcasts” and it didn’t offer much information on each show nor did it allow for much exploration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Planning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Product Manager &lt;a href=&quot;https://twitter.com/cschieffer&quot; target=&quot;_blank&quot;&gt;Chris Schieffer&lt;/a&gt; conducted extensive interviews with various Slate people to see what they wanted out of the new podcast pages. He decided there would be three pages and came up with the following priorities and features for each page:&lt;/p&gt;

&lt;p&gt;Landing Page:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Understanding the breadth of what podcasts Slate is making right now&lt;/li&gt;
  &lt;li&gt;Listen to a trailer&lt;/li&gt;
  &lt;li&gt;Subscribe&lt;/li&gt;
  &lt;li&gt;Slate Plus pitch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Show Page:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Learn about the show&lt;/li&gt;
  &lt;li&gt;Listen to a trailer&lt;/li&gt;
  &lt;li&gt;Subscribe&lt;/li&gt;
  &lt;li&gt;Slate Plus pitch&lt;/li&gt;
  &lt;li&gt;Interact with episodes inside of show&lt;/li&gt;
  &lt;li&gt;Social links, newsletter sign up, link to discussion group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Episode Page:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Learn about the episode&lt;/li&gt;
  &lt;li&gt;Listen to the show&lt;/li&gt;
  &lt;li&gt;Subscribe&lt;/li&gt;
  &lt;li&gt;Slate Plus pitch&lt;/li&gt;
  &lt;li&gt;Recirculation (text and audio via topic)&lt;/li&gt;
  &lt;li&gt;Social links, newsletter sign up, link to discussion group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Design Process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After carefully reviewing Chris’s notes on the project, I started on some very basic wireframes.&lt;/p&gt;

&lt;p&gt;Based on the notes, I figured the landing page should focus on featuring Slate’s shows, specifically the ones currently in production.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for landing page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_lp1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for landing page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_lp2.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for landing page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_lp3.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;For the show page, I focused on explaining the show concisely, including a trailer, and linking to the show in various players (since that is how most people would be listening).&lt;/p&gt;

&lt;p&gt;I also featured the latest episodes for each show. The one caveat here was how do we represent episodes differently for ongoing (ex. Political Gabfest) vs. seasonal (ex. Slow Burn) shows?&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for show page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_show1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for show page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_show2.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for show page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_show3.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;For the episode page, I focused on learning about and listening to the episode as well as linking the episode to the show page.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for episode page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_ep1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for episode page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_ep2.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;wireframe for episode page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/wireframe_ep3.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After deciding on wireframes, I need to design the pages in a way that felt consistent w/ the &lt;a href=&quot;https://slate.com/briefing/2018/01/why-we-redesigned-slate.html&quot; target=&quot;_blank&quot;&gt;new site design&lt;/a&gt; but also made sense within the podcast project.&lt;/p&gt;

&lt;p&gt;I ended up using a lot of similar components on each page (&lt;a href=&quot;https://clay.nymag.com/&quot; target=&quot;_blank&quot;&gt;Slate’s CMS Clay&lt;/a&gt; is built with components) to make it easy to navigate between the pages. The Slate Plus and “Need Help?” components are on all three pages while the “How to Listen &amp;amp; Subscribe” component is on both the show and episode pages.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;mock for landing page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/mock_lp.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;mock for show page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/mock_show.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img alt=&quot;mock for episode page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/mock_ep.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;One thing I realized during this process is that in addition to the three main pages, we would need an archive page. Slate has so many shows and it didn’t make sense to feature old ones that are no longer in production on the landing page so an archive page seemed like the right answer.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img alt=&quot;archive link&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/archive_link.png&quot; /&gt;
		&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1rem;&quot;&gt;Link to archive page&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img alt=&quot;archive page&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/archive_page.png&quot; /&gt;
		&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1rem;&quot;&gt;Archive page&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;User Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While making the mocks, I had a few questions about the experience that I wanted to user test:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Should the shows on the landing page be structured alphabetically or by section?&lt;/li&gt;
  &lt;li&gt;Do users understand how to use the “How to Listen” section on the show page?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;For the first question&lt;/strong&gt;, I tested a mock with all the “featured shows” alphabetically vs. grouped by section.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/slate_podcasts/lp_alphabetical.jpg&quot; /&gt;
		&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1rem;&quot;&gt;Podcasts sorted alphabetically&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/slate_podcasts/lp_sections.jpg&quot; /&gt;
		&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1rem;&quot;&gt;Podcasts sorted by section&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I tested a group of Slate readers and a group of non-Slate readers. While users understood the alphabetical section they preferred the shows grouped by section because it is easier for a user to know what the show is about. If a user wanted to avoid all “News &amp;amp; Politics” shows, they could easily skip that section and move to the next.&lt;/p&gt;

&lt;p&gt;The one argument for the alphabetical ordering of shows was if the user knew exactly what they were looking for. But, as you can see in the list of priorities for each page, the point of this page was to show the breadth of Slate’s offerings so we decided to go with the section grouping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the second question&lt;/strong&gt;, I tested the “How to Listen &amp;amp; Subscribe” section to see if people understood the “text me a link” form.&lt;/p&gt;

&lt;p&gt;The app subscribe buttons are a very common way to link to shows in podcast applications but the “text me a link” form isn’t. Because most people listen to podcasts on their phones, I thought the texting feature would be helpful but I wanted to user test this to make sure. Does the text form help or confuse the user?&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/slate_podcasts/how_to_full.png&quot; /&gt;
		&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1rem;&quot;&gt;Section with both the texting form and app subscribe buttons&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/slate_podcasts/how_to_buttons.png&quot; /&gt;
		&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1rem;&quot;&gt;Section with just app subscribe buttons&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;While most users were more likely to use the app buttons to subscribe (or even just going to the app and searching for the podcast), they liked the option to text. So, we kept the version with the text form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Team&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I worked on this project with many people. Product management was led by &lt;a href=&quot;https://twitter.com/cschieffer&quot; target=&quot;_blank&quot;&gt;Chris Schieffer&lt;/a&gt; and design was led by &lt;a href=&quot;https://twitter.com/jasonsantamaria&quot; target=&quot;_blank&quot;&gt;Jason Santa Maria&lt;/a&gt;. Development work was completed by &lt;a href=&quot;https://twitter.com/jon47&quot; target=&quot;_blank&quot;&gt;Jonathan Zuckerman&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/meijiOrO/&quot; target=&quot;_blank&quot;&gt;Kim Le&lt;/a&gt; and Chase Felker. The podcast tile art featured throughout was done by &lt;a href=&quot;https://twitter.com/lrsnwlkr&quot; target=&quot;_blank&quot;&gt;Lisa Larson-Walker&lt;/a&gt; and the art on the homepage was done by &lt;a href=&quot;https://twitter.com/MatthewsRamo&quot; target=&quot;_blank&quot;&gt;Natalie Matthews-Ramo&lt;/a&gt;.&lt;/p&gt;</content><summary type="html">I updated the Slate podcasts process to make it easier for users to explore Slate’s shows, find what they’re looking for and subscribe. The design was updated to fit the new Slate brand launched in 2018.</summary></entry><entry><title type="html">Flex grid menu</title><link href="http://localhost:4000/2018/03/25/menu-flex-grid.html" rel="alternate" type="text/html" title="Flex grid menu" /><published>2018-03-25T00:00:00-04:00</published><updated>2018-03-25T00:00:00-04:00</updated><id>http://localhost:4000/2018/03/25/menu-flex-grid</id><content type="html" xml:base="http://localhost:4000/2018/03/25/menu-flex-grid.html">&lt;p&gt;I re-coded the &lt;strong&gt;&lt;a href=&quot;https://www.retaildive.com/&quot; target=&quot;_blank&quot;&gt;menu&lt;/a&gt;&lt;/strong&gt; for all Industry Dive products using a flex grid. This resulted in a more accessible menu with code that scales better for growth.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/menu.png&quot; alt=&quot;menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Going into this project, my two main goals were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make the menu more accessible at a higher number of screen sizes&lt;/li&gt;
  &lt;li&gt;Make the code more scalable for a growing number of variants in the menu&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For inspiration, I looked at both &lt;a href=&quot;https://www.vox.com/&quot; target=&quot;_blank&quot;&gt;Vox&lt;/a&gt; and &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;GitHub’s&lt;/a&gt; menus to see how they structured their HTML and CSS because they had similar content (logo, regular menu and sub menu). Both publications use flex grids.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Research&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started by researching all grid methods. Industry Dive currently uses a modified &lt;a href=&quot;https://foundation.zurb.com/&quot; target=&quot;_blank&quot;&gt;Foundation grid&lt;/a&gt; for all sites because it is responsive and well-supported. When I had brought up an alternate grid before, the main concern was support, specifically in Internet Explorer, so I needed to prove that whatever I chose would work within these constraints.&lt;/p&gt;

&lt;p&gt;The most helpful articles were &lt;a href=&quot;https://hackernoon.com/the-ultimate-css-battle-grid-vs-flexbox-d40da0449faf&quot; target=&quot;_blank&quot;&gt;this Hacker Noon article&lt;/a&gt; that explains flex vs. CSS grid and &lt;a href=&quot;https://philipwalton.github.io/solved-by-flexbox/demos/grids/&quot; target=&quot;_blank&quot;&gt;Philip Walton’s article&lt;/a&gt; on how flex grids work in general.&lt;/p&gt;

&lt;p&gt;The Hacker Noon article mentions that “Flexbox is made for one dimensional layouts and Grid is made for two dimensional layouts.” Because I was only re-coding the menu (not the whole site), I decided to go with flex. As you can see below, flexbox has great support. From my research, CSS grids seem really cool but are still pretty new and not well-supported.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/flex_support.png&quot; alt=&quot;flex grid support&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;
&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Flex grid support, screenshot from &lt;a href=&quot;https://caniuse.com/#feat=flexbox&quot;&gt;Can I Use&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reassessing the menu SCSS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, I broke up the menu SCSS so it was easier to manage. This was pretty straightforward: the menu CSS was previously all in one SCSS partial so I broke it up into three partials: &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_base.scss&lt;/code&gt;&lt;/span&gt;, &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_desktop.scss&lt;/code&gt;&lt;/span&gt; and &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_mobile.scss&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Currently, the desktop and mobile menus run off almost completely separate code and the small amount of code shared is in &lt;code class=&quot;highlighter-rouge&quot;&gt;_base.scss&lt;/code&gt;. To implement the flex grid, I would mainly be editing the desktop and base menus so the split made the code more maintainable and easier to read.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* _menu.scss */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'base'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mobile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'desktop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Setting up flex grid&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As previously mentioned, the menu was originally written using a Foundation (float) grid. Because this only controls the widths, floats and clearing for each column, all other elements needed to be manually styled. For example, each &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;&lt;/span&gt; list below’s &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt;&lt;/span&gt; items needed to be styled with &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;display: inline-block&lt;/code&gt;&lt;/span&gt; to make the menu horizontal.&lt;/p&gt;

&lt;p&gt;With the new flex grid structure, neither the floats nor inline styling were necessary, because the flex grid does this for you. This is easier to manage and scale.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-menu&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-menu-inner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menu-content-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;desktop-menu-main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- desktop menu, not visible on mobile --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mobile-menu-toggle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- mobile menu toggle icon, not visible on desktop --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;desktop-menu-sub list-no-bullets&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            	&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- sub desktop menu, not visible on mobile --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the SCSS, most of it made sense after reading the flex grid documentation mentioned above.&lt;/p&gt;

&lt;p&gt;The most confusing property related to the flex grid is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex&quot; target=&quot;_blank&quot;&gt;flex&lt;/a&gt;. The two most frequently used styles are &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex: auto&lt;/code&gt;&lt;/span&gt; and &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex: initial&lt;/code&gt;&lt;/span&gt;. &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;&lt;/span&gt; grows or shrinks according to the free space in the container while &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flex: initial&lt;/code&gt;&lt;/span&gt; only shrinks to fill the minimum size of the container. Both styles are used on &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.menu-content-wrapper&lt;/code&gt;&lt;/span&gt;, which wraps both menus. &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt;&lt;/span&gt; is used on mobile screens while &lt;span class=&quot;inline-code&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt;&lt;/span&gt; is used on medium and large screens.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.site-menu-inner&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// vertically centers all items
&lt;/span&gt;    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;55px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// added so mobile menu stays on the right
&lt;/span&gt;    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;75rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nc&quot;&gt;.menu-content-wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;space-between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// initial is flex: 0 1 auto;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$menu-breakpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.menu-content-wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// auto is flex: 1 1 auto; 
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.desktop-menu-main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.desktop-menu-sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Making the flex grid responsive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far, the changes to the menu haven’t changed what it actually looks like. But, as previously stated, one of the goals of this project was to make the menu more accessible on smaller screen sizes. Making it work on mobile is a different project but what about tablets and small laptops? This was going to involve some slight visual changes.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 3rem;&quot;&gt;Before:&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/medium_menu_before.png&quot; alt=&quot;medium menu before&quot; style=&quot;margin: 0 auto 1.5rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-top: 1.5rem;&quot;&gt;After:&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/medium_menu_after.png&quot; alt=&quot;medium menu after&quot; style=&quot;margin: 0 auto 3rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing to change was the &lt;strong&gt;sub menu CTAs&lt;/strong&gt; (the menu on the right). To account for the thinner screen width, I removed the CTA for “search” because the magnifying glass is fairly universally known to represent “search”. I considered removing the CTA for the newsletter signup link as well but I don’t think the email icon makes much sense without “signup”.&lt;/p&gt;

&lt;p&gt;The other element to address was the &lt;strong&gt;“Topics” menu&lt;/strong&gt;. On desktop, the “Topics” menu is visible at the top of the page but changes to a dropdown on scroll (see screenshot above). It is also a horizontal menu. I knew on a medium-sized screen, all the items in the menu wouldn’t fit horizontally so it should be vertical.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/medium_topics_menu_open.png&quot; alt=&quot;topics menu&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;
&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Topics menu open on medium screens&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finishing touches&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To make the menu fully work, I had to reassess the JS associated with the menu and update the SCSS breakpoints so this actually worked across the 15 different menus running on this code (see all pubs &lt;a href=&quot;https://www.retaildive.com/about/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/smt_menu.png&quot; alt=&quot;smt menu&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;
&lt;span class=&quot;help-text&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.socialmediatoday.com/&quot;&gt;Social Media Today&lt;/a&gt; menu on medium screens&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flex_menu/biopharma_menu.png&quot; alt=&quot;biopharma menu&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;
&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.biopharmadive.com/&quot;&gt;BioPharma Dive&lt;/a&gt; menu on medium screens&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Although the JS and SCSS breakpoints brought about some complications, I plan to clean them up in the future. I also want to update the code so the menu is fully responsive from mobile to desktop (goodbye hamburger menu), not just across medium and desktop.&lt;/p&gt;</content><summary type="html">I re-coded the menu for all Industry Dive products using a flex grid. This resulted in a more accessible menu with code that scales better for growth.</summary></entry><entry><title type="html">Dive Library page</title><link href="http://localhost:4000/2018/01/06/library-page.html" rel="alternate" type="text/html" title="Dive Library page" /><published>2018-01-06T00:00:00-05:00</published><updated>2018-01-06T00:00:00-05:00</updated><id>http://localhost:4000/2018/01/06/library-page</id><content type="html" xml:base="http://localhost:4000/2018/01/06/library-page.html">&lt;p&gt;I recently redesigned the &lt;strong&gt;&lt;a href=&quot;https://www.biopharmadive.com/library/&quot;&gt;Library page&lt;/a&gt;&lt;/strong&gt; for each of Industry Dive’s publications with the help of the dev team to better showcase the &lt;a href=&quot;https://www.industrydive.com/brandstudio/&quot;&gt;Dive Brand Studio’s&lt;/a&gt; content.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/library_page/page_hands_header.jpg&quot; alt=&quot;page in ipad mockup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.industrydive.com/brandstudio/&quot;&gt;Dive Brand Studio&lt;/a&gt; is the in-house content studio at Industry Dive. They work with clients to create playbooks, webinars and other lead-gen content for Industry Dive’s readers.&lt;/p&gt;

&lt;p&gt;Their content is promoted in a variety of ways but the only place is was all centrally housed was on the &lt;a href=&quot;https://www.constructiondive.com/library/&quot;&gt;library page&lt;/a&gt; on Industry Dive’s publication sites. The page features both Brand Studio content along with promoted content from clients. If redesigned, how could the new page account for both content types while focusing on the Brand Studio content?&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/library_page/old_library_page.png&quot; alt=&quot;old library page&quot; style=&quot;margin: 3rem auto 1.5rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;The old library page that &lt;strong&gt;doesn’t&lt;/strong&gt; show difference between the two content types&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Planning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, I spoke with the Brand Studio team about what its priorities were for this redesign:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Increase leads from campaigns&lt;/li&gt;
  &lt;li&gt;Ensure that the page is valuable to the user&lt;/li&gt;
  &lt;li&gt;Increase Brand Studio brand awareness&lt;/li&gt;
  &lt;li&gt;Create layout that is easy to manipulate (i.e. there are multiple ways to promote one item and this can easily be done through the CMS)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, I looked at the current options available for each listing (i.e. what fields are in the CMS) and considered other possible requirements Brand Studio might request. This would help when explaining the scope of the project to the back-end developer helping with the project.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt; - All items have a client who is sponsoring the content regardless of the content type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Item type&lt;/strong&gt; - Is it a playbook, a webinar, an e-book or something else?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Brand Studio vs. Client&lt;/strong&gt; - Who created the content?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Photo vs. no photo&lt;/strong&gt; - Ideally all items have a photo but what if they don’t?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/wireframe1.jpg&quot; alt=&quot;wireframe&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;Wireframe featuring one item promoted at the top&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/wireframe2.jpg&quot; alt=&quot;wireframe&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;Wireframe featuring multiple items promoted at the top with option to filter items by topic and content type&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Wireframes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After doing some research, I started wireframing the page. My first thought was to remove the sidebar, allowing the page to have a full-width template so it could be differentiated from the rest of the site. Also, being able to filter the content based on topic and content type would make the page easier to navigate for the user.&lt;/p&gt;

&lt;p&gt;To make it more appealing for the user to enter their information, the actual download process needed to be simpiler. Historically, users had to click on the title that then took them to a landing page, which took users to a third party site to download the content. Wouldn’t it be easier to have it all hosted on our site? I knew some of these ideas would get shot down for the MVP but I wanted to sell the vision of easy-to-download content.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/wireframe3.jpg&quot; alt=&quot;wireframe&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;Option to download item on the page&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/wireframe4.jpg&quot; alt=&quot;wireframe&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;Option to download item once you click through to the landing page&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Mockups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the first few mockups of the page, my main challenge was how to layout each item with each variant (the ones mentioned above). What happens if a photo isn’t uploaded? How can I better indicate what type of content the item is? Is the item made by a client or by the Brand Studio?&lt;/p&gt;

&lt;p&gt;In the second mock below, I added a top ad placement, where the Brand Studio would be able to promote a particular piece. I also added ads within the feed of content to promote LinkedIn groups and the newsletter.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1.5rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock1.jpg&quot; alt=&quot;mockup&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;First mock with filtering options&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1.5rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock2.jpg&quot; alt=&quot;mockup&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;Mock with additional ad/signup placements&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;For the download process, I looked primarily at the &lt;a href=&quot;https://www.smashingmagazine.com/2013/03/designing-a-better-mobile-checkout-process/&quot;&gt;Amazon’s checkout process&lt;/a&gt; to see what would increase conversions. As previously stated, I wanted to make this more seamless. When talking to our audience development team, someone suggested adding the feature to sign in with LinkedIn.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock_pop_1.jpg&quot; alt=&quot;mockup&quot; /&gt; 
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock_pop_2.jpg&quot; alt=&quot;mockup&quot; /&gt; 
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 1rem auto 3rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock_pop_3.jpg&quot; alt=&quot;mockup&quot; /&gt; 
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 1rem auto 3rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock_pop_4.jpg&quot; alt=&quot;mockup&quot; /&gt; 
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the next iteration of mocks, I cleaned up the page by focusing on separating client (content in the grey box) vs. Brand Studio work (all other content on the page). I also decided that photos should be required because the icon + gradient style was starting to look a bit repetitive.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock3.jpg&quot; alt=&quot;mockup&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;Mock featuring client content at the bottom of the page&lt;/span&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img style=&quot;margin: 3rem auto 1rem auto;&quot; src=&quot;http://localhost:4000/assets/img/library_page/mock4.jpg&quot; alt=&quot;mockup&quot; /&gt; 
		&lt;span class=&quot;help-text&quot;&gt;This mock moves client content up the page&lt;/span&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I knew this would be a large tech undertaking so after meeting with a developer, we prioritized what should be in the first release of the page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Adding photos to each item&lt;/li&gt;
  &lt;li&gt;Differentiation between client and Brand Studio content&lt;/li&gt;
  &lt;li&gt;Back-end refactoring to make the CMS process easier for users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, the back-end could be restructured before adding new larger features, such as making the content download from our site (not a third-party site).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rollout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final product for the MVP looks relatively similar to the final mocks. The one difference is that instead of having the icon overlay on the photo, the icon along with CTA text appears on hover so the user can see the whole photo. Also the styling of the “Industry Intel” (i.e. the client content section) is slightly different.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/library_page/phase1.gif&quot; alt=&quot;phase1 gif&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/library_page/phase1_mobile.gif&quot; alt=&quot;phase1 mobile gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, I will look at engagement on the page and make tweaks accordingly as well as pushing forward on making the download process more seamless.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Development work for this project was done by Bethany Morin. This post was originally published on &lt;a href=&quot;http://design.industrydive.com/&quot;&gt;Industry Dive’s Design Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><summary type="html">I recently redesigned the Library page for each of Industry Dive’s publications with the help of the dev team to better showcase the Dive Brand Studio’s content.</summary></entry><entry><title type="html">GIG iOS App</title><link href="http://localhost:4000/2017/10/14/gig-app.html" rel="alternate" type="text/html" title="GIG iOS App" /><published>2017-10-14T00:00:00-04:00</published><updated>2017-10-14T00:00:00-04:00</updated><id>http://localhost:4000/2017/10/14/gig-app</id><content type="html" xml:base="http://localhost:4000/2017/10/14/gig-app.html">&lt;p&gt;&lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://invis.io/AMD99G92K&quot;&gt;GIG&lt;/a&gt;&lt;/strong&gt; is an app for going to concerts with your friends. It was created because I thought there was a void in the market for a service that allows you to plan, buy and attend concerts with your friends easily.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/app_hand.jpg&quot; alt=&quot;app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RESEARCH&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original Problem Statement:&lt;/strong&gt; People who attend many concerts have a disjointed experience purchasing, organizing and attending multiple events.&lt;/p&gt;

&lt;p&gt;After deciding on what I thought the problem was, I looked at what already exists in the market to solve this problem. I looked at products that help people plan for events and products that allow you to buy tickets to an event, specifically concerts.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/competitive_analysis1.png&quot; alt=&quot;competitive analysis&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/competitive_analysis2.png&quot; alt=&quot;competitive analysis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My main competitors, it seems, are &lt;a target=&quot;_blank&quot; href=&quot;http://www.ticketfly.com/&quot;&gt;Ticketfly&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://news.bandsintown.com/home&quot;&gt;Bands In Town&lt;/a&gt;. But, neither one of them fully did what I wanted it to do.&lt;/p&gt;

&lt;p&gt;Next, I developed a target audience and interviewed people in that audience. My target audience is anyone who goes to a lot of concerts. Although this could be any age, this usually applies to a younger, 20s audience because, after interviewing someone in their 30s, it seems people who are older don’t have as much free time to go to many shows.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/sticky_notes.jpg&quot; alt=&quot;sticky notes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this research, I decided on the user’s goals, problems and a new problem statement. Although I didn’t structure the user interviews around their friends, every person interviewed brought up their friends when asked about their concert-going experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Interviewees wanted to be able to find and attend concerts easily&lt;/li&gt;
  &lt;li&gt;All interviewees considered their friends’ interest when attending shows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Knowing about all the concerts available in their area&lt;/li&gt;
  &lt;li&gt;Knowing which friends are interested in certain concerts&lt;/li&gt;
  &lt;li&gt;Planning for event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;New Problem Statement:&lt;/strong&gt; People who attend many concerts have trouble accessing the information they need about the shows in their area and planning for the event with their friends.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/features.png&quot; alt=&quot;list of features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLANNING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next step was deciding which features the solution should have. I decided on an app instead of a website because of convenience and the target audience. I also had the idea to incorporate Venmo which would require my solution to be an app.&lt;/p&gt;

&lt;p&gt;Then, I moved on to sketching and wireframing. I talked to a few people about the information architecture of the site and they all grouped “shows you’re attending” with “shows you’re friends are attending.” This was probably the most difficult thing to visualize because there were so many ways to show it.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img alt=&quot;sketch #1&quot; src=&quot;http://localhost:4000/assets/img/gig_app/sketch1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img alt=&quot;sketch #2&quot; src=&quot;http://localhost:4000/assets/img/gig_app/sketch2.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/sketch3.jpg&quot; alt=&quot;sketch #3&quot; style=&quot;margin: 3rem auto;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/wireframe1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/wireframe2.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/wireframe3.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After creating wireframes, I tested this initial setup with some users and people found the “Attending” menu item a bit confusing. I realized showing this information could maybe be done in a different way.&lt;/p&gt;

&lt;p&gt;I then moved on to higher fidelity prototypes. After interviewing users with these new mockups, the menu items made more sense but users were confused by the onboarding. What exactly does the app do? How is the feed made? The ticket buying experience was clear but getting to that process was not. I realized the onboarding process needed some work.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/assets/img/gig_app/hifi1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/hifi2.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;FINAL PRODUCT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After many iterations, I decided on a final product that many users found clear and easy to use. See the prototype &lt;a target=&quot;_blank&quot; href=&quot;https://invis.io/AMD99G92K&quot;&gt;here&lt;/a&gt; and see screenshots of that prototype below.&lt;/p&gt;

&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/final1.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/final2.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/final3.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/final4.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/final5.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-33&quot;&gt;
		&lt;img class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/gig_app/final6.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;What I built is definitely the minimum to meet the user’s needs. Some users suggested a few features that could be added in a future version of the app:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“Favorite” feature&lt;/strong&gt; - for shows you might want to attend but don’t want to commit to right away&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Add to calendar” feature&lt;/strong&gt; - option to “add to calendar” (iCal or Google) after you’ve purchased a ticket&lt;/li&gt;
  &lt;li&gt;More &lt;strong&gt;social media-like aspects&lt;/strong&gt; - “add friends”, “follow venues”, “favorite” artists&lt;/li&gt;
&lt;/ul&gt;</content><summary type="html">GIG is an app for going to concerts with your friends. It was created because I thought there was a void in the market for a service that allows you to plan, buy and attend concerts with your friends easily.</summary></entry><entry><title type="html">Social Media Today CMS</title><link href="http://localhost:4000/2017/06/10/smt-user-content-admin.html" rel="alternate" type="text/html" title="Social Media Today CMS" /><published>2017-06-10T00:00:00-04:00</published><updated>2017-06-10T00:00:00-04:00</updated><id>http://localhost:4000/2017/06/10/smt-user-content-admin</id><content type="html" xml:base="http://localhost:4000/2017/06/10/smt-user-content-admin.html">&lt;p&gt;As the lead designer for the &lt;strong&gt;&lt;a href=&quot;http://www.socialmediatoday.com/&quot;&gt;Social Media Today&lt;/a&gt;&lt;/strong&gt; launch, my first project was researching and designing a new CMS. Because the site runs on user-generated content (ie. anyone can make an account and submit a story), the submission and approval process is crucial.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;margin-top: 5rem;&quot; class=&quot;help-text&quot;&gt;Before:&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;margin-top: 1rem;&quot; class=&quot;img-flex-wrapper&quot;&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img alt=&quot;smt old admin&quot; src=&quot;http://localhost:4000/assets/img/smt_cms/old_dash_admin.jpg&quot; /&gt;
	&lt;/div&gt;
	&lt;div class=&quot;img-flex-50&quot;&gt;
		&lt;img alt=&quot;smt old admin&quot; class=&quot;p-img&quot; src=&quot;http://localhost:4000/assets/img/smt_cms/old_dash_user.jpg&quot; /&gt;
	&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot;&gt;After:&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt_intro.jpg&quot; alt=&quot;medium menu before&quot; style=&quot;margin-top: 1rem;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;History&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Industry Dive acquired Social Media Today (SMT) in 2015 and for the first year, we were just maintaining the site and keeping the content updated. Recently, we decided to convert this site so it is on the same platform as our other publications.&lt;/p&gt;

&lt;p&gt;Part of that conversion is moving the site onto our custom CMS. But, because SMT runs off of user-submitted content (not reviewed by in-house editors like our other publications), there are a few extra functionalities that needed to be added, such as content submission and approval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, I interviewed many of the people who worked on the site: writers submitting content, editors and admins approving content, ad operations managers trying to place ads and general users of the site. Their main issue with the CMS was that it was clunky and not intuitive:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Filtering user-submitted content:&lt;/strong&gt; no clear indication of which posts are drafts, submitted for review and approved to publish&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. How users submit content:&lt;/strong&gt; language on page isn’t clear, no clear difference between drafts and submitted content, hard to preview story&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. How editors/admins submit content:&lt;/strong&gt; hard to find page where you would add content, selecting images and tags is tedious, hard to schedule posts&lt;/p&gt;

&lt;p&gt;Users are either regular users (they can only write and submit stories) or admin users (they can write and submit content as well as approve and publish content). Throughout the interviews, admin users expressed interest in a more rigorous application process to become a contributor due to the high number of stagnant users and bots.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt_user_flows.jpg&quot; alt=&quot;user flows&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After interviewing, I looked at a variety of content management systems, specifically &lt;a href=&quot;https://product.voxmedia.com/2016/2/23/11098476/curbed-on-chorus-the-start-of-a-new-era-at-vox-media&quot;&gt;Vox Media’s Chorus&lt;/a&gt;, and also sites used for storage and document organization, such as Google Drive and Dropbox. These provided not only design inspiration but also ideas for navigation and functionality.&lt;/p&gt;

&lt;p&gt;According to the interviews, my overall goal was to unify the CMS dashboard (which was previously hosted on Drupal) and the MySMT page to improve navigation ease and make each process easier to find.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt1.jpg&quot; alt=&quot;new mock&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Regular user - “Posts” page&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Because of all the user confusion, I added more notifications that will make the site clearer for both regular and new users.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt3.jpg&quot; alt=&quot;new mock&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Regular user - notification received after their post was submitted&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt2.jpg&quot; alt=&quot;new mock&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Regular user - notification received after their post was published&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;For an admin or editor who is approving and publishing content, I wanted to make it super easy to find the newly submitted posts from users. This content should be separate from what is already published on the site.&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt5.jpg&quot; alt=&quot;new mock&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Admin user - list of “submitted” posts from regular users&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;p-img&quot;&gt;&lt;img src=&quot;http://localhost:4000/assets/img/smt_cms/smt6.jpg&quot; alt=&quot;new mock&quot; style=&quot;margin: 3rem auto 1rem auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;help-text&quot; style=&quot;margin-bottom: 3rem;&quot;&gt;Admin user - list of all published posts on the site&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SMT has now been migrated over to our platform but implementing all of the above mocks is quite cumbersome so it has not been completed yet. Ideally, the whole CMS (that all sites use) will be redesigned so it visually looks like the above mocks and the SMT concepts will be integrated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ryan McKnight was the project manager for this project.&lt;/em&gt;&lt;/p&gt;</content><summary type="html">As the lead designer for the Social Media Today launch, my first project was researching and designing a new CMS. Because the site runs on user-generated content (ie. anyone can make an account and submit a story), the submission and approval process is crucial.</summary></entry></feed>
